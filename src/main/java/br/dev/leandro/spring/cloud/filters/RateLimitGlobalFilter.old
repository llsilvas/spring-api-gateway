//package br.dev.leandro.spring.cloud.filters;
//
//import com.fasterxml.jackson.core.JsonProcessingException;
//import com.fasterxml.jackson.databind.ObjectMapper;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.cloud.gateway.filter.GatewayFilterChain;
//import org.springframework.cloud.gateway.filter.GlobalFilter;
//import org.springframework.core.Ordered;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.server.reactive.ServerHttpResponse;
//import org.springframework.stereotype.Component;
//import org.springframework.web.server.ServerWebExchange;
//import reactor.core.publisher.Mono;
//
//import java.time.Instant;
//import java.util.Map;
//import java.util.concurrent.ConcurrentHashMap;
//import java.util.concurrent.atomic.AtomicInteger;
//
//@Slf4j
//@Component
//public class RateLimitGlobalFilter implements GlobalFilter, Ordered {
//
//    private final Map<String, AtomicInteger> requestCounts = new ConcurrentHashMap<>();
//
//    @Override
//    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
//        String ip = exchange.getRequest().getRemoteAddress().getAddress().getHostAddress();
//        int limit = 5;
//
//        requestCounts.putIfAbsent(ip, new AtomicInteger(0));
//        int current = requestCounts.get(ip).incrementAndGet();
//
//        if (current > limit) {
//            log.warn("Rate limit exceeded for IP: {}", ip);
//
//            Map<String, Object> body = Map.of(
//                    "status", 429,
//                    "error", "Too Many Requests",
//                    "message", "Rate limit exceeded. Please try again later.",
//                    "timestamp", Instant.now()
//            );
//
//            ServerHttpResponse response = exchange.getResponse();
//            response.setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
//            response.getHeaders().add("Content-Type", "application/json");
//
//            try {
//                ObjectMapper objectMapper = new ObjectMapper();
//                objectMapper.findAndRegisterModules(); // Isso ativa o suporte a Instant, LocalDateTime etc.
//
//                byte[] bytes = objectMapper.writeValueAsBytes(body);
//
//                return response.writeWith(Mono.just(response.bufferFactory().wrap(bytes)));
//            } catch (JsonProcessingException e) {
//                return Mono.error(e);
//            }
//        }
//
//        return chain.filter(exchange);
//    }
//
//    @Override
//    public int getOrder() {
//        return -3; // Antes dos outros filtros
//    }
//}
